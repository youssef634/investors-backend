// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  fullName       String
  phone          String   @unique
  profileImage   String?
  email          String   @unique
  password       String
  role           Role     @default(ADMIN)
 
  Settings               Settings[]
  createdYears           FinancialYear[] @relation("CreatedYears")
  approvedYears          FinancialYear[] @relation("ApprovedYears")
  distributedYears       FinancialYear[] @relation("DistributedYears")
}

model investors {
  id                  Int      @id @default(autoincrement())
  fullName            String
  phone               String?     @unique       
  amount              Float       @default(0)
  rollover_amount     Float       @default(0) 
  total_amount        Float       @default(0) 
  createdAt           DateTime    @default(now())

  transactions        Transaction[] 
  profitDistributions YearlyProfitDistribution[]
}

model Transaction {
  id            Int      @id @default(autoincrement())
  investorId    Int
  type          TransactionType   
  amount        Float
  currency      String
  date          DateTime @default(now())
  withdrawSource WithdrawSource? 
  withdrawFromAmount Float?
  financialYearId Int?       
  status            TransactionStatus @default(PENDING)

  investors      investors     @relation(fields: [investorId], references: [id])
  financialYear  FinancialYear? @relation(fields: [financialYearId], references: [id])
}

model Settings {
  id              Int     @id @default(autoincrement())
  userId          Int     @unique
  timezone        String  @default("UTC")
  defaultCurrency String  @default("IQD")
  USDtoIQD        Float  

  user           User    @relation(fields: [userId], references: [id])
}

  model FinancialYear {
  id                Int        @id @default(autoincrement())
  year              Int
  periodName        String?    @unique
  totalProfit       Float
  currency          String     @default("IQD")
  startDate         DateTime
  endDate           DateTime
  totalDays         Int?
  dailyProfit       Float?
  status            FinancialYearStatus @default(PENDING)

  // Rollover settings
  rolloverEnabled    Boolean       @default(false)
  rolloverPercentage Float?        @default(100)

  createdById       Int
  approvedById      Int?
  distributedById   Int?

  createdBy         User          @relation("CreatedYears", fields: [createdById], references: [id])
  approvedBy        User?         @relation("ApprovedYears", fields: [approvedById], references: [id])
  distributedBy     User?         @relation("DistributedYears", fields: [distributedById], references: [id])

  approvedAt        DateTime?
  distributedAt     DateTime?
  createdAt         DateTime   @default(now())

  profitDistributions YearlyProfitDistribution[]
  transactions        Transaction[] 
}

model YearlyProfitDistribution {
  id                  Int        @id @default(autoincrement())
  financialYearId     Int
  investorId          Int
  amount              Float
  percentage          Float
  dailyProfit         Float? @default(0)
  totalProfit         Float        
  daysSoFar       Int      @default(0)
  isRollover      Boolean    @default(false)
  createdAt       DateTime   @default(now())

  financialYear   FinancialYear @relation(fields: [financialYearId], references: [id])
  investors      investors     @relation(fields: [investorId], references: [id])

  @@unique([financialYearId, investorId])
}

enum FinancialYearStatus {
  PENDING
  DISTRIBUTED
}

enum TransactionStatus {
  PENDING
  CANCELED
}

enum WithdrawSource {
  AMOUNT
  ROLLOVER
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PROFIT
}

enum Role {
  ADMIN
  USER
}